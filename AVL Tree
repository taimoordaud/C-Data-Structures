#include <iostream>
#include <queue>                 
using namespace std;

class node
{
public:
    node* left;      
    node* right;
    int data;
    int height;
};

class AVL
{
public:
    node* root;
    AVL()
    {
        this->root = nullptr;
    }

    int calculatingheight(node* temp)       
    {
        if (temp->left && temp->right)
        {
            if (temp->left->height < temp->right->height)
            {
                return temp->right->height + 1;
            }
            else
            {
                return  temp->left->height + 1;
            }
        }
        else if (temp->left && temp->right == nullptr)
        {
            return temp->left->height + 1;
        }
        else if (temp->left == nullptr && temp->right)
        {
            return temp->right->height + 1;
        }
        return 0;
    }

    int BalanceFactor(node* temp)
    {
        if (temp->left && temp->right)
        {
            return temp->left->height - temp->right->height;
        }
        else if (temp->left && temp->right == nullptr)
        {
            return temp->left->height;
        }
        else if (temp->left == nullptr && temp->right)
        {
            return -temp->right->height;
        }
    }

    node* leftleftRotation(node* temp)
    {
        node* itr;
        node* itr2;
        itr = temp;
        itr2 = itr->left;
        itr->left = itr2->right;
        itr2->right = itr;
        return itr2;
    }

    node* rightrightRotation(node* temp)
    {
        node* itr;
        node* itr2;
        itr = temp;
        itr2 = itr->right;
        itr->right = itr2->left;
        itr2->left = itr;
        return itr2;
    }

    node* rightleftRotation(node* temp)
    {
        node* itr;
        node* itr2;
        node* itr3;
        itr = temp;
        itr2 = itr->right;
        itr3 = itr->right->left;
        itr->right = itr3->left;
        itr2->left = itr3->right;
        itr3->left = itr;
        itr3->right = itr2;
        return itr3;
    }

    node* leftrightRotation(node* temp)
    {
        node* itr;
        node* itr2;
        node* itr3;
        itr = temp;
        itr2 = itr->left;
        itr3 = itr->left->right;
        itr->left = itr3->right;
        itr2->right = itr3->left;
        itr3->right = itr;
        itr3->left = itr2;
        return itr3;
    }

    node* insert(node* temp, int data)
    {
        if (temp == nullptr)
        {
            node* itr2;
            itr2 = new  node;
            itr2->data = data;
            temp = itr2;
            temp->left = temp->right = nullptr;
            temp->height = 1;
            return temp;
        }
        else
        {
            if (data < temp->data)
            {
                temp->left = insert(temp->left, data);
            }
            else
            {
                temp->right = insert(temp->right, data);
            }
        }

        temp->height = calculatingheight(temp);

        if (BalanceFactor(temp) == 2 && BalanceFactor(temp->left) == 1)
        {
            temp = leftleftRotation(temp);
        }
        else if (BalanceFactor(temp) == -2 && BalanceFactor(temp->right) == -1)
        {
            temp = rightrightRotation(temp);
        }
        else if (BalanceFactor(temp) == -2 && BalanceFactor(temp->right) == 1)
        {
            temp = rightleftRotation(temp);
        }
        else if (BalanceFactor(temp) == 2 && BalanceFactor(temp->left) == -1)
        {
            temp = leftrightRotation(temp);
        }
        return temp;
    }

    void LevelOrder()
    {
        if (this->root == nullptr)
        {
            cout << " Empty tree ";
            return;
        }
        LevelOrder(this->root);
    }

    void LevelOrder(node* v)
    {
        queue <node*> que;
        node* temp;
        que.push(v);

        while (!que.empty())
        {
            temp = que.front();
            que.pop();
            if (temp != nullptr)
            {
                cout << " " << temp->data;

                if (temp->left != nullptr)
                {
                    que.push(temp->left);
                }
                if (temp->right != nullptr)
                {
                    que.push(temp->right);
                }
            }
        }
    }

    node* deleteNode(node* temp, int data)
    {
        if (temp->left == nullptr && temp->right == nullptr)
        {
            if (temp == this->root)
                this->root = nullptr;
            delete temp;
            return nullptr;
        }

        node* itr2;
        if (temp->data < data)
        {
            temp->right = deleteNode(temp->right, data);
        }
        else if (temp->data > data)
        {
            temp->left = deleteNode(temp->left, data);
        }
        else
        {
            if (temp->left != nullptr)
            {
                itr2 = inpre(temp->left);
                temp->data = itr2->data;
                temp->left = deleteNode(temp->left, itr2->data);
            }
            else
            {
                itr2 = itr(temp->right);
                temp->data = itr2->data;
                temp->right = deleteNode(temp->right, itr2->data);
            }
        }

        if (BalanceFactor(temp) == 2 && BalanceFactor(temp->left) == 1)
        {
            temp = leftleftRotation(temp);
        }
        else if (BalanceFactor(temp) == 2 && BalanceFactor(temp->left) == -1)
        {
            temp = leftrightRotation(temp);
        }
        else if (BalanceFactor(temp) == 2 && BalanceFactor(temp->left) == 0)
        {
            temp = leftleftRotation(temp);
        }
        else if (BalanceFactor(temp) == -2 && BalanceFactor(temp->right) == -1)
        {
            temp = rightrightRotation(temp);
        }
        else if (BalanceFactor(temp) == -2 && BalanceFactor(temp->right) == 1)
        {
            temp = rightleftRotation(temp);
        }
        else if (BalanceFactor(temp) == -2 && BalanceFactor(temp->right) == 0)
        {
            temp = leftleftRotation(temp);
        }
        return temp;
    }

    void Postorder(node* node)
    {
        if (node == nullptr)
            return;
        Postorder(node->left);
        Postorder(node->right);
        cout << node->data << " ";
    }

    void PostOrder()
    {
        Postorder(root);
    }

    void Inorder(node* node)
    {
        if (node == nullptr)
            return;
        Inorder(node->left);
        cout << node->data << " ";
        Inorder(node->right);
    }

    void InOrder()
    {
        Inorder(root);
    }

    void Preorder(node* node)
    {
        if (node == nullptr)
            return;
        cout << node->data << " ";
        Preorder(node->left);
        Preorder(node->right);
    }

    void PreOrder()
    {
        Preorder(root);
    }

    node* inpre(node* p)
    {
        while (p->right != nullptr)
            p = p->right;
        return p;
    }

    node* itr(node* p)
    {
        while (p->left != nullptr)
            p = p->left;
        return p;
    }
};

int main()
{
    AVL tree;
    int choice = 0, x = 0;
    do
    {
        system("cls");
        cout << "1.Display levelorder";
        cout << "\n2.Insert";
        cout << "\n3.Delete";
        cout << "\n4.Inorder";
        cout << "\n5.Preorder";
        cout << "\n6.Postorder";
        cout << "\n0.Exit\n";
        cout << "\nEnter Your Choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            tree.LevelOrder();
            system("pause");
            break;
        case 2:
            cout << "\nEnter Number ";
            cin >> x;
            tree.root = tree.insert(tree.root, x);
            break;

        case 3:
            cout << "\nDelete? ";
            cin >> x;
            tree.root = tree.deleteNode(tree.root, x);
            cout << x << " Deleted\n";
            system("pause");
            break;

        case 4:
            tree.InOrder();
            system("pause");
            break;

        case 5:
            tree.PreOrder();
            system("pause");
            break;

        case 6:
            tree.PostOrder();
            system("pause");
            break;

        case 0:
            cout << "Program Ended!\n";
            system("pause");
            break;
        default:
            cout << "Invalid Input\n";
            system("pause");
            break;
        }
    } while (choice != 0);
